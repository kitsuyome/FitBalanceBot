import logging
import asyncio
import requests
import html
import os
import numpy as np
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InputFile
from aiogram.client.default import DefaultBotProperties
from deep_translator import GoogleTranslator

FOOD_API_URL = "https://world.openfoodfacts.org/cgi/search.pl"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

users = {}

LOW_CALORIE_FOODS = [
    {"name": "–û–≥—É—Ä–µ—Ü", "calories": 15},
    {"name": "–ü–æ–º–∏–¥–æ—Ä", "calories": 18},
    {"name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "calories": 165},
    {"name": "–¢–≤–æ—Ä–æ–≥ –æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π", "calories": 70},
    {"name": "–Ø–±–ª–æ–∫–æ", "calories": 52}
]

WORKOUTS = {
    "low": ["–ô–æ–≥–∞ (30 –º–∏–Ω) - 150 –∫–∫–∞–ª", "–ü–µ—à–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ (45 –º–∏–Ω) - 200 –∫–∫–∞–ª"],
    "medium": ["–í–µ–ª–æ—Å–∏–ø–µ–¥ (30 –º–∏–Ω) - 300 –∫–∫–∞–ª", "–ü–ª–∞–≤–∞–Ω–∏–µ (30 –º–∏–Ω) - 250 –∫–∫–∞–ª"],
    "high": ["–ë–µ–≥ (30 –º–∏–Ω) - 400 –∫–∫–∞–ª", "–ö—Ä–æ—Å—Å—Ñ–∏—Ç (30 –º–∏–Ω) - 500 –∫–∫–∞–ª"]
}

async def get_weather(city: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ OpenWeatherMap API"""
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric"
        response = requests.get(url).json()
        return response['main']['temp']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ API: {e}")
        return 20.0 
        
def calculate_water(profile: dict) -> int:
    """–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã"""
    base = profile["weight"] * 30
    activity = (profile["activity"] // 30) * 500
    weather = 500 if profile.get("temperature", 20) > 25 else 0
    return base + activity + weather

def calculate_calories(profile: dict) -> int:
    """–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π"""
    weight = profile["weight"]
    height = profile["height"]
    age = profile["age"]
    
    if profile.get("gender") == "male":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    activity_factor = 1.2 + (profile["activity"] / 60) * 0.1
    return int(bmr * activity_factor)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FitBalanceBot ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n"
        "üíß –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n"
        "üçé –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è\n"
        "üèãÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–ù–∞—á–Ω–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: /set_profile"
    )

@dp.message(Command("set_profile"))
async def cmd_set_profile(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    users[user_id] = {
        "step": "weight",
        "history": {"dates": [], "water": [], "calories": []}
    }
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")

@dp.message(Command("faq"))
async def cmd_faq(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    faq_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üíß /log_water [–æ–±—ä–µ–º] - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã (–≤ –º–ª)\n"
        "üçé /log_food [–ø—Ä–æ–¥—É–∫—Ç] - –ó–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
        "üèãÔ∏è /log_workout [—Ç–∏–ø] [–º–∏–Ω—É—Ç—ã] - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "üìä /check_progress - –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üí° /recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚öôÔ∏è /set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚ùì /faq - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"
    )
    await message.answer(faq_text, parse_mode=ParseMode.HTML)

@dp.message(Command("log_water"))
async def cmd_log_water(message: Message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã"""
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
    
    try:
        amount = int(message.text.split()[1])
        if amount <= 0:
            raise ValueError
        
        users[user_id]["logged_water"] += amount
        remaining = users[user_id]["water_goal"] - users[user_id]["logged_water"]
        
        users[user_id]["history"]["dates"].append(datetime.now().date())
        users[user_id]["history"]["water"].append(amount)
        
        await message.answer(
            f"üíß +{amount} –º–ª –≤–æ–¥—ã!\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {users[user_id]['logged_water']}/{users[user_id]['water_goal']} –º–ª\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª"
        )
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_water 500\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
        )

@dp.message(Command("log_food"))
async def cmd_log_food(message: Message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è"""
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
    
    try:
        product_ru = ' '.join(message.text.split()[1:])
        if not product_ru:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–¥—É–∫—Ç")
        
        product_en = GoogleTranslator(source='ru', target='en').translate(product_ru)
        
        params = {
            'search_terms': product_en,
            'json': 1,
            'page_size': 1
        }
        response = requests.get(FOOD_API_URL, params=params)
        data = response.json()
        
        if not data.get('products'):
            raise ValueError("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        product = data['products'][0]
        calories = product.get('nutriments', {}).get('energy-kcal_100g', 0)
        
        if not calories:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏")
        
        users[user_id]["_food"] = calories
        product_name = product.get('product_name_ru') or product_ru
        
        await message.answer(
            f"üçé {product_name.capitalize()}\n"
            f"üî¢ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories} –∫–∫–∞–ª/100–≥\n"
            "üìè –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
            "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_food –±–∞–Ω–∞–Ω\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
        )

@dp.message(Command("log_workout"))
async def cmd_log_workout(message: Message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
    
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            raise ValueError
        
        workout_type = ' '.join(args[:-1]).lower()
        duration = int(args[-1])
        
        calories_burned = duration * 8
        water_bonus = (duration // 30) * 200
        
        users[user_id]["burned_calories"] += calories_burned
        users[user_id]["water_goal"] += water_bonus
        
        users[user_id]["history"]["dates"].append(datetime.now().date())
        users[user_id]["history"]["calories"].append(calories_burned)
        
        await message.answer(
            f"üèãÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ: {calories_burned} –∫–∫–∞–ª\n"
            f"üí¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ–¥—ã: +{water_bonus} –º–ª\n"
            f"üìà –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {users[user_id]['water_goal']} –º–ª"
        )
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /log_workout –±–µ–≥ 30\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏ –¥—Ä."
        )

@dp.message(Command("check_progress"))
async def cmd_check_progress(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
    
    profile = users[user_id]
    water_remaining = profile["water_goal"] - profile["logged_water"]
    calories_balance = profile["calorie_goal"] - profile["logged_calories"] + profile["burned_calories"]
    
    progress_text = (
        f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {datetime.now().strftime('%d.%m.%Y')}</b>\n\n"
        f"üíß –í–æ–¥–∞:\n"
        f"‚Ä¢ –í—ã–ø–∏—Ç–æ: {profile['logged_water']} –º–ª –∏–∑ {profile['water_goal']} –º–ª\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {water_remaining} –º–ª\n\n"
        f"üçè –ö–∞–ª–æ—Ä–∏–∏:\n"
        f"‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {profile['logged_calories']:.1f} –∫–∫–∞–ª\n"
        f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ: {profile['burned_calories']} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {calories_balance:.1f}/{profile['calorie_goal']} –∫–∫–∞–ª"
    )
    await message.answer(progress_text, parse_mode=ParseMode.HTML)


@dp.message(Command("recommend"))
async def cmd_recommend(message: Message):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    if user_id not in users:
        return await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /set_profile")
    
    profile = users[user_id]
    balance = profile['calorie_goal'] - profile['logged_calories']
    
    food = np.random.choice(LOW_CALORIE_FOODS)
    
    if balance > 500:
        workout_type = "low"
    elif balance > 300:
        workout_type = "medium"
    else:
        workout_type = "high"
    
    workout = np.random.choice(WORKOUTS[workout_type])
    
    await message.answer(
        f"üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
        f"üçè –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:\n"
        f"{food['name']} ({food['calories']} –∫–∫–∞–ª/100–≥)\n\n"
        f"üèãÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n"
        f"{workout}\n\n"
        f"‚öñÔ∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.1f} –∫–∫–∞–ª",
        parse_mode=ParseMode.HTML
    )

@dp.message(lambda msg: users.get(msg.from_user.id, {}).get('step') == 'weight')
async def process_weight(message: Message):
    user_id = message.from_user.id
    try:
        weight = int(message.text)
        if weight <= 0:
            raise ValueError
        users[user_id]["weight"] = weight
        users[user_id]["step"] = "height"
        await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")

@dp.message(lambda msg: users.get(msg.from_user.id, {}).get('step') == 'height')
async def process_height(message: Message):
    user_id = message.from_user.id
    try:
        height = int(message.text)
        if height <= 0:
            raise ValueError
        users[user_id]["height"] = height
        users[user_id]["step"] = "age"
        await message.answer("üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")

@dp.message(lambda msg: users.get(msg.from_user.id, {}).get('step') == 'age')
async def process_age(message: Message):
    user_id = message.from_user.id
    try:
        age = int(message.text)
        if age <= 0:
            raise ValueError
        users[user_id]["age"] = age
        users[user_id]["step"] = "activity"
        await message.answer("üèÉ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")

@dp.message(lambda msg: users.get(msg.from_user.id, {}).get('step') == 'activity')
async def process_activity(message: Message):
    user_id = message.from_user.id
    try:
        activity = int(message.text)
        if activity < 0:
            raise ValueError
        users[user_id]["activity"] = activity
        users[user_id]["step"] = "city"
        await message.answer("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è —É—á–µ—Ç–∞ –ø–æ–≥–æ–¥—ã:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç")

@dp.message(lambda msg: users.get(msg.from_user.id, {}).get('step') == 'city')
async def process_city(message: Message):
    user_id = message.from_user.id
    try:
        city = message.text.strip()
        if not city:
            raise ValueError
        
        users[user_id]["city"] = city
        users[user_id]["temperature"] = await get_weather(city)
        
        users[user_id]["water_goal"] = calculate_water(users[user_id])
        users[user_id]["calorie_goal"] = calculate_calories(users[user_id])
        
        users[user_id].update({
            "logged_water": 0,
            "logged_calories": 0.0,
            "burned_calories": 0
        })
        
        del users[user_id]["step"]
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"üíß –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {users[user_id]['water_goal']} –º–ª\n"
            f"üçè –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {users[user_id]['calorie_goal']} –∫–∫–∞–ª\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(lambda msg: users.get(msg.from_user.id, {}).get('_food'))
async def process_food_weight(message: Message):
    user_id = message.from_user.id
    try:
        grams = int(message.text)
        if grams <= 0:
            raise ValueError
        
        calories = (users[user_id]["_food"] * grams) / 100
        users[user_id]["logged_calories"] += calories
        
        users[user_id]["history"]["dates"].append(datetime.now().date())
        users[user_id]["history"]["calories"].append(calories)
        
        del users[user_id]["_food"]
        
        await message.answer(
            f"üçΩ –°—ä–µ–¥–µ–Ω–æ: {grams}–≥\n"
            f"üî• –ó–∞–ø–∏—Å–∞–Ω–æ: {calories:.1f} –∫–∫–∞–ª\n"
            f"üìä –í—Å–µ–≥–æ: {users[user_id]['logged_calories']:.1f}/"
            f"{users[user_id]['calorie_goal']} –∫–∫–∞–ª"
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
